#include <iostream>
#include <cstdio>
#include <cstring>
#include <vector>
#include <algorithm>
#include <cmath>

using namespace std;

#define mp make_pair
#define pb push_back
#define ll long long

const int maxN = 4018;

int a, b, m, i, j, x, y, gra[maxN], grb[maxN], mini, S, D;
vector< pair<int, int> > edges;

vector< pair<int, int> > list[maxN];
vector< vector<int> > ans;

bool dfs(int node) {
    bool here = false;
    if (node == S) return true;

    int i;
    for (i = 0; i < list[node].size(); i++) {
        auto e = list[node][i];
        list[node][i] = list[node].back();
        list[node].pop_back();
        
        if (dfs(e.first)) {
            list[e.first].pb(mp(node, e.second));
            here = true;

            if (node == D) i--;
        } else {
            list[node].pb(e);
            swap(list[node][i], list[node].back());
        }
    }

    return here;
}

void run() {
    vector<int> now = {};
    int i;
   

    while (dfs(D)) {
        //cerr << "ano\n";
    }

    for (i = 1; i <= b; i++) {
        for (auto e : list[a + i])
            if (e.second != 0)
                now.pb(e.second);
    }

    ans.pb(now);
}

int main()
{
//    freopen("test.in","r",stdin);

    scanf("%d%d%d", &a, &b, &m);
    for (i = 1; i <= m; i++) {
        scanf("%d%d", &x, &y);
        edges.pb(mp(x, y));
        gra[x]++;
        grb[y]++;
        list[a + y].pb(mp(x, i));
    }

    mini = gra[1];
    for (i = 1; i <= a; i++)
        mini = min(mini, gra[i]);
    for (i = 1; i <= b; i++)
        mini = min(mini, grb[i]);

    S = a + b + 1;
    D = a + b + 2;
    for (i = 1; i <= a; i++) {
        for (j = 1; j <= gra[i] - mini; j++)
            list[i].pb(mp(S, 0));
    }
    for (i = 1; i <= b; i++) {
        for (j = 1; j <= grb[i] - mini; j++)
            list[D].pb(mp(a + i, 0));
    }

    for (; mini >= 0; mini--) {
        run();
        for (i = 1; i <= a; i++)
            list[i].pb(mp(S, 0));
        for (i = 1; i <= b; i++)
            list[D].pb(mp(a + i, 0));
    }
    

    reverse(ans.begin(), ans.end());
    for (auto &v: ans) {
        printf("%d ", v.size());
        for (auto e : v) printf("%d ", e);
        printf("\n");
    }

    return 0;
}

5 14
4444444444433344444444444333444444444443334444444444433344444444444333444444444443332222222221133322222222211333222222222113332222222221133322222222211333222222222113332222222221133322222222200000

5 20
4444444333333333333344444443333333333333444444433333333333334444444333333333333344444443333333333333444444433333333333334444444333333333333344444443333333333333444444433333333333334444444333333333333344444443333333333333444444433333333333334444444333333333333344444443333333333333444444433333333333334444444333333333333322222113333333333333222220000000000000002222200000000000000022222000000000000000

6 16
0000001111111111223333111111111122333311111111112233331111111111223333111111111122333311111111112233331111111111223333111111111122444444444444442244444444444444224444444444444422444444444444442244444444444444555555555555555555555555555555555555555555555555

6 35



7 35


7 40



8 21
000000000000000666677000000000000000666677000000000000000666677000000000000000666677000000000000000666677133333333333333666677133333333333333666677133333333333333666677133333333333333666677133333333333333666677133333333333333666677133333333333333666677144444444445555555577144444444445555555577144444444445555555577144444444445555555577144444444445555555577144444444445555555577222222222225555555577222222222225555555577222222222225555555577

8 29



9 25



10 30



#include <iostream>
#include <cstdio>
#include <cstring>
#include <vector>
#include <algorithm>
#include <cmath>

using namespace std;

#define mp make_pair
#define pb push_back
#define ll long long

#define maxN 43

struct drept {
    int x, y, ln, co;
};

int n, l, i, area;
int row[maxN];
int used[maxN];
vector<drept> ans;

int A[maxN][maxN];

void give_sol() {
    int i, j, val;

    val = 0;
    for (auto e : ans) {

        for (i = 0; i < e.ln; i++)
            for (j = 0; j < e.co; j++)
                A[e.x + i][e.y + j] = val;

        val++;
    }

    for (i = 1; i <= l; i++) {
        for (j = 1; j <= l; j++) {
            printf("%d", A[i][j]);
            cerr << A[i][j] << ' ';
        }
        cerr << '\n';
    }

}

void back(int step) {
    if (area < 0) return;

    if (step > n) {
        if (area != 0) return;
        give_sol();
        exit(0);
    }

    int i;
    int wh = min_element(row + 1, row + l + 1) - row;
    vector<int> ln, co;
    ln = co = {};

    // optimizari...
    static vector<int> aux;
    aux.clear();
    for (i = 1; i <= l; i++) aux.pb(row[i]);
    sort(aux.begin(), aux.end());
    aux.resize(unique(aux.begin(), aux.end()) - aux.begin());

    if (step - 1 + aux.size() > n)
        return;

    // ---------------

    for (i = 1; row[wh + i - 1] == row[wh]; i++)
        if (!used[i])
            ln.pb(i);
    for (i = 1; row[wh] + i <= l; i++)
        if (!used[i])
            co.pb(i);

    random_shuffle(ln.begin(), ln.end());
    random_shuffle(co.begin(), co.end());

    for (auto xx : ln) {
        for (auto yy : co) {
            if (xx == yy) continue;

            used[xx] = used[yy] = true;
            ans.pb({wh, row[wh] + 1, xx, yy});
            for (i = 0; i < xx; i++) row[wh + i] += yy;
            area -= xx * yy;

            back(step + 1);

            area += xx * yy;
            used[xx] = used[yy] = false;
            ans.pop_back();
            for (i = 0; i < xx; i++) row[wh + i] -= yy;
        }
    }
}

int main()
{
    freopen("badea.in","r",stdin);
    freopen("badea.out","w",stdout);

    scanf("%d%d", &n, &l);
    area = l * l;

    row[0] = row[l + 1] = -1;

    back(1);


    return 0;
}



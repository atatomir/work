#include <cstdio>
#include <vector>
#include <bitset>
#define NMAX 5005
#define LMAX (1 << 16)
#define pb push_back
using namespace std;
int n, m, c, ord[NMAX], r;
vector <int> G[NMAX], GG[NMAX];
bitset <NMAX> sol[NMAX], fbits, newMask, undef, vis;

void dfs(int node)
{
    vis[node] = 1;
    int i;
    for (i = 0; i < (int)GG[node].size(); i++)
        if (!vis[GG[node][i]])
            dfs(GG[node][i]);
    ord[++r] = node;
}

int main()
{
    freopen("colonii.in", "r", stdin);
    freopen("colonii.out", "w", stdout);

    scanf("%d%d%d", &n, &m, &c);
    int x, y;
    for (int i = 1; i <= m; i++)
    {
        scanf("%d%d", &x, &y);
        GG[x].pb(y);
        G[y].pb(x);
    }

    dfs(c);
    for (int i = 1; i <= n; i++)
        if (!vis[i])
            dfs(i);

    for (int i = 1; i <= n; i++)
        fbits[i] = 1;
    sol[c][c] = 1;
    for (int i = 1; i <= n; i++)
        if (i != c)
        {
            sol[i] = fbits;
            undef[i] = 1;
        }

    bool change = true;
    while (change)
    {
        change = false;
        for (int i = n; i >= 1; i--)
            if (ord[i] != c)
            {
                newMask = fbits;
                for (int j = 0; j < (int)G[ord[i]].size(); j++)
                    if (!undef[G[ord[i]][j]])
                        newMask &= sol[G[ord[i]][j]];
                newMask[ord[i]] = 1;

                if (sol[ord[i]] != newMask)
                {
                    change = true;
                    sol[ord[i]] = newMask;
                    undef[ord[i]] = 0;
                }
            }
    }

    for (int i = 1; i <= n; i++)
        printf("%d\n", (int)sol[i].count() - 1);
    return 0;
}
